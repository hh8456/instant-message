// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package common

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 球衣信息
type ClothData struct {
	ClothID              int32    `protobuf:"varint,1,opt,name=ClothID,proto3" json:"ClothID,omitempty"`
	TemplateID           int32    `protobuf:"varint,2,opt,name=TemplateID,proto3" json:"TemplateID,omitempty"`
	NeckID               int32    `protobuf:"varint,3,opt,name=NeckID,proto3" json:"NeckID,omitempty"`
	FontID               int32    `protobuf:"varint,4,opt,name=FontID,proto3" json:"FontID,omitempty"`
	NameFontID           int32    `protobuf:"varint,5,opt,name=NameFontID,proto3" json:"NameFontID,omitempty"`
	BodyColors           []uint32 `protobuf:"varint,6,rep,packed,name=BodyColors,proto3" json:"BodyColors,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClothData) Reset()         { *m = ClothData{} }
func (m *ClothData) String() string { return proto.CompactTextString(m) }
func (*ClothData) ProtoMessage()    {}
func (*ClothData) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *ClothData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClothData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClothData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClothData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClothData.Merge(m, src)
}
func (m *ClothData) XXX_Size() int {
	return m.Size()
}
func (m *ClothData) XXX_DiscardUnknown() {
	xxx_messageInfo_ClothData.DiscardUnknown(m)
}

var xxx_messageInfo_ClothData proto.InternalMessageInfo

func (m *ClothData) GetClothID() int32 {
	if m != nil {
		return m.ClothID
	}
	return 0
}

func (m *ClothData) GetTemplateID() int32 {
	if m != nil {
		return m.TemplateID
	}
	return 0
}

func (m *ClothData) GetNeckID() int32 {
	if m != nil {
		return m.NeckID
	}
	return 0
}

func (m *ClothData) GetFontID() int32 {
	if m != nil {
		return m.FontID
	}
	return 0
}

func (m *ClothData) GetNameFontID() int32 {
	if m != nil {
		return m.NameFontID
	}
	return 0
}

func (m *ClothData) GetBodyColors() []uint32 {
	if m != nil {
		return m.BodyColors
	}
	return nil
}

func init() {
	proto.RegisterType((*ClothData)(nil), "common.ClothData")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 180 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0xb6, 0x32, 0x72,
	0x71, 0x3a, 0xe7, 0xe4, 0x97, 0x64, 0xb8, 0x24, 0x96, 0x24, 0x0a, 0x49, 0x70, 0xb1, 0x83, 0x39,
	0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xac, 0x41, 0x30, 0xae, 0x90, 0x1c, 0x17, 0x57, 0x48,
	0x6a, 0x6e, 0x41, 0x4e, 0x62, 0x49, 0xaa, 0xa7, 0x8b, 0x04, 0x13, 0x58, 0x12, 0x49, 0x44, 0x48,
	0x8c, 0x8b, 0xcd, 0x2f, 0x35, 0x39, 0xdb, 0xd3, 0x45, 0x82, 0x19, 0x2c, 0x07, 0xe5, 0x81, 0xc4,
	0xdd, 0xf2, 0xf3, 0x4a, 0x3c, 0x5d, 0x24, 0x58, 0x20, 0xe2, 0x10, 0x1e, 0xc8, 0x3c, 0xbf, 0xc4,
	0xdc, 0x54, 0xa8, 0x1c, 0x2b, 0xc4, 0x3c, 0x84, 0x08, 0x48, 0xde, 0x29, 0x3f, 0xa5, 0xd2, 0x39,
	0x3f, 0x27, 0xbf, 0xa8, 0x58, 0x82, 0x4d, 0x81, 0x59, 0x83, 0x37, 0x08, 0x49, 0xc4, 0x49, 0xe0,
	0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e,
	0x21, 0x89, 0x0d, 0xec, 0x31, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xaa, 0x1b, 0x2a,
	0xe8, 0x00, 0x00, 0x00,
}

func (m *ClothData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClothData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClothData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BodyColors) > 0 {
		dAtA2 := make([]byte, len(m.BodyColors)*10)
		var j1 int
		for _, num := range m.BodyColors {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintCommon(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.NameFontID != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NameFontID))
		i--
		dAtA[i] = 0x28
	}
	if m.FontID != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.FontID))
		i--
		dAtA[i] = 0x20
	}
	if m.NeckID != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.NeckID))
		i--
		dAtA[i] = 0x18
	}
	if m.TemplateID != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.TemplateID))
		i--
		dAtA[i] = 0x10
	}
	if m.ClothID != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ClothID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClothData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClothID != 0 {
		n += 1 + sovCommon(uint64(m.ClothID))
	}
	if m.TemplateID != 0 {
		n += 1 + sovCommon(uint64(m.TemplateID))
	}
	if m.NeckID != 0 {
		n += 1 + sovCommon(uint64(m.NeckID))
	}
	if m.FontID != 0 {
		n += 1 + sovCommon(uint64(m.FontID))
	}
	if m.NameFontID != 0 {
		n += 1 + sovCommon(uint64(m.NameFontID))
	}
	if len(m.BodyColors) > 0 {
		l = 0
		for _, e := range m.BodyColors {
			l += sovCommon(uint64(e))
		}
		n += 1 + sovCommon(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClothData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClothData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClothData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClothID", wireType)
			}
			m.ClothID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClothID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateID", wireType)
			}
			m.TemplateID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TemplateID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeckID", wireType)
			}
			m.NeckID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NeckID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FontID", wireType)
			}
			m.FontID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FontID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameFontID", wireType)
			}
			m.NameFontID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameFontID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BodyColors = append(m.BodyColors, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCommon
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCommon
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BodyColors) == 0 {
					m.BodyColors = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCommon
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BodyColors = append(m.BodyColors, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BodyColors", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCommon
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCommon
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCommon(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCommon
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCommon = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon   = fmt.Errorf("proto: integer overflow")
)
