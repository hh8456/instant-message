// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: srv_struct.proto

package msg_struct

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 玩家开始战斗数据
type PlayerData4BattleInServer struct {
	// 玩家基础战斗信息
	// playerData4Battle playerBaseInfo = 1;
	// 游戏类型, 1匹配赛, 2 排位赛, 3,4单挑房
	// GameType gameType = 2;
	// 玩家所处大厅id
	GameID int32 `protobuf:"varint,3,opt,name=gameID,proto3" json:"gameID,omitempty"`
	// 好友邀请赛使用
	FriendID int64 `protobuf:"varint,4,opt,name=friendID,proto3" json:"friendID,omitempty"`
	// 杯赛使用-杯赛轮数
	CupRound int32 `protobuf:"varint,5,opt,name=cupRound,proto3" json:"cupRound,omitempty"`
	// 杯赛id（结算打日志）
	CupID int32 `protobuf:"varint,6,opt,name=cupID,proto3" json:"cupID,omitempty"`
	// 邀请赛房间id
	SoloRoomID int64 `protobuf:"varint,7,opt,name=soloRoomID,proto3" json:"soloRoomID,omitempty"`
	// 球场
	FootballField int32 `protobuf:"varint,9,opt,name=FootballField,proto3" json:"FootballField,omitempty"`
	// 球型
	Ball                 int32    `protobuf:"varint,10,opt,name=Ball,proto3" json:"Ball,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerData4BattleInServer) Reset()         { *m = PlayerData4BattleInServer{} }
func (m *PlayerData4BattleInServer) String() string { return proto.CompactTextString(m) }
func (*PlayerData4BattleInServer) ProtoMessage()    {}
func (*PlayerData4BattleInServer) Descriptor() ([]byte, []int) {
	return fileDescriptor_9b9a3367500a0a14, []int{0}
}
func (m *PlayerData4BattleInServer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerData4BattleInServer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerData4BattleInServer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerData4BattleInServer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerData4BattleInServer.Merge(m, src)
}
func (m *PlayerData4BattleInServer) XXX_Size() int {
	return m.Size()
}
func (m *PlayerData4BattleInServer) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerData4BattleInServer.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerData4BattleInServer proto.InternalMessageInfo

func (m *PlayerData4BattleInServer) GetGameID() int32 {
	if m != nil {
		return m.GameID
	}
	return 0
}

func (m *PlayerData4BattleInServer) GetFriendID() int64 {
	if m != nil {
		return m.FriendID
	}
	return 0
}

func (m *PlayerData4BattleInServer) GetCupRound() int32 {
	if m != nil {
		return m.CupRound
	}
	return 0
}

func (m *PlayerData4BattleInServer) GetCupID() int32 {
	if m != nil {
		return m.CupID
	}
	return 0
}

func (m *PlayerData4BattleInServer) GetSoloRoomID() int64 {
	if m != nil {
		return m.SoloRoomID
	}
	return 0
}

func (m *PlayerData4BattleInServer) GetFootballField() int32 {
	if m != nil {
		return m.FootballField
	}
	return 0
}

func (m *PlayerData4BattleInServer) GetBall() int32 {
	if m != nil {
		return m.Ball
	}
	return 0
}

func init() {
	proto.RegisterType((*PlayerData4BattleInServer)(nil), "msg_struct.PlayerData4BattleInServer")
}

func init() { proto.RegisterFile("srv_struct.proto", fileDescriptor_9b9a3367500a0a14) }

var fileDescriptor_9b9a3367500a0a14 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x2e, 0x2a, 0x8b,
	0x2f, 0x2e, 0x29, 0x2a, 0x4d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0xca, 0x2d,
	0x4e, 0x87, 0x8a, 0x28, 0xdd, 0x66, 0xe4, 0x92, 0x0c, 0xc8, 0x49, 0xac, 0x4c, 0x2d, 0x72, 0x49,
	0x2c, 0x49, 0x34, 0x71, 0x4a, 0x2c, 0x29, 0xc9, 0x49, 0xf5, 0xcc, 0x0b, 0x4e, 0x2d, 0x2a, 0x4b,
	0x2d, 0x12, 0x12, 0xe3, 0x62, 0x4b, 0x4f, 0xcc, 0x4d, 0xf5, 0x74, 0x91, 0x60, 0x56, 0x60, 0xd4,
	0x60, 0x0d, 0x82, 0xf2, 0x84, 0xa4, 0xb8, 0x38, 0xd2, 0x8a, 0x32, 0x53, 0xf3, 0x52, 0x3c, 0x5d,
	0x24, 0x58, 0x14, 0x18, 0x35, 0x98, 0x83, 0xe0, 0x7c, 0x90, 0x5c, 0x72, 0x69, 0x41, 0x50, 0x7e,
	0x69, 0x5e, 0x8a, 0x04, 0x2b, 0x58, 0x17, 0x9c, 0x2f, 0x24, 0xc2, 0xc5, 0x9a, 0x5c, 0x5a, 0xe0,
	0xe9, 0x22, 0xc1, 0x06, 0x96, 0x80, 0x70, 0x84, 0xe4, 0xb8, 0xb8, 0x8a, 0xf3, 0x73, 0xf2, 0x83,
	0xf2, 0xf3, 0x73, 0x3d, 0x5d, 0x24, 0xd8, 0xc1, 0xe6, 0x21, 0x89, 0x08, 0xa9, 0x70, 0xf1, 0xba,
	0xe5, 0xe7, 0x97, 0x24, 0x25, 0xe6, 0xe4, 0xb8, 0x65, 0xa6, 0xe6, 0xa4, 0x48, 0x70, 0x82, 0x75,
	0xa3, 0x0a, 0x0a, 0x09, 0x71, 0xb1, 0x38, 0x25, 0xe6, 0xe4, 0x48, 0x70, 0x81, 0x25, 0xc1, 0x6c,
	0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6,
	0x63, 0x39, 0x86, 0x24, 0x36, 0x70, 0x10, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa2, 0x5b,
	0x24, 0xf1, 0x16, 0x01, 0x00, 0x00,
}

func (m *PlayerData4BattleInServer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerData4BattleInServer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerData4BattleInServer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ball != 0 {
		i = encodeVarintSrvStruct(dAtA, i, uint64(m.Ball))
		i--
		dAtA[i] = 0x50
	}
	if m.FootballField != 0 {
		i = encodeVarintSrvStruct(dAtA, i, uint64(m.FootballField))
		i--
		dAtA[i] = 0x48
	}
	if m.SoloRoomID != 0 {
		i = encodeVarintSrvStruct(dAtA, i, uint64(m.SoloRoomID))
		i--
		dAtA[i] = 0x38
	}
	if m.CupID != 0 {
		i = encodeVarintSrvStruct(dAtA, i, uint64(m.CupID))
		i--
		dAtA[i] = 0x30
	}
	if m.CupRound != 0 {
		i = encodeVarintSrvStruct(dAtA, i, uint64(m.CupRound))
		i--
		dAtA[i] = 0x28
	}
	if m.FriendID != 0 {
		i = encodeVarintSrvStruct(dAtA, i, uint64(m.FriendID))
		i--
		dAtA[i] = 0x20
	}
	if m.GameID != 0 {
		i = encodeVarintSrvStruct(dAtA, i, uint64(m.GameID))
		i--
		dAtA[i] = 0x18
	}
	return len(dAtA) - i, nil
}

func encodeVarintSrvStruct(dAtA []byte, offset int, v uint64) int {
	offset -= sovSrvStruct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerData4BattleInServer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GameID != 0 {
		n += 1 + sovSrvStruct(uint64(m.GameID))
	}
	if m.FriendID != 0 {
		n += 1 + sovSrvStruct(uint64(m.FriendID))
	}
	if m.CupRound != 0 {
		n += 1 + sovSrvStruct(uint64(m.CupRound))
	}
	if m.CupID != 0 {
		n += 1 + sovSrvStruct(uint64(m.CupID))
	}
	if m.SoloRoomID != 0 {
		n += 1 + sovSrvStruct(uint64(m.SoloRoomID))
	}
	if m.FootballField != 0 {
		n += 1 + sovSrvStruct(uint64(m.FootballField))
	}
	if m.Ball != 0 {
		n += 1 + sovSrvStruct(uint64(m.Ball))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSrvStruct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSrvStruct(x uint64) (n int) {
	return sovSrvStruct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerData4BattleInServer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSrvStruct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerData4BattleInServer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerData4BattleInServer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameID", wireType)
			}
			m.GameID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GameID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendID", wireType)
			}
			m.FriendID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FriendID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CupRound", wireType)
			}
			m.CupRound = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CupRound |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CupID", wireType)
			}
			m.CupID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CupID |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoloRoomID", wireType)
			}
			m.SoloRoomID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoloRoomID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FootballField", wireType)
			}
			m.FootballField = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FootballField |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ball", wireType)
			}
			m.Ball = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ball |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSrvStruct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSrvStruct
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSrvStruct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSrvStruct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSrvStruct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSrvStruct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSrvStruct
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSrvStruct
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSrvStruct
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSrvStruct(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSrvStruct
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSrvStruct = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSrvStruct   = fmt.Errorf("proto: integer overflow")
)
